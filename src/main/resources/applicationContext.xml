<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd ">

    <context:annotation-config />
    <!-- controlers -->
    <context:component-scan base-package="**.action.**" />
    <!-- components -->
    <context:component-scan base-package="**.util.**" />
    <!-- services -->
    <context:component-scan base-package="**.service.**.impl.**" />
    <context:component-scan base-package="**.service.**.simple.**" />
    
    <context:property-placeholder location="classpath:jdbc.properties" />
    
    <bean id="dataSource" 
        class="${jdbc.pooledClass}"
        p:driver="${jdbc.driver}"
        p:driverUrl="${jdbc.url}"
        p:user="${jdbc.username}" 
        p:password="${jdbc.password}"
        p:minimumConnectionCount="${jdbc.minimumConnectionCount}"
        p:maximumConnectionCount="${jdbc.maximumConnectionCount}"
        p:houseKeepingTestSql="${jdbc.houseKeepingTestSql}"
    />
        <!-- p:houseKeepingSleepTime="${jdbc.houseKeepingSleepTime}"  -->

    <bean id="sqlSessionFactory" 
        class="org.mybatis.spring.SqlSessionFactoryBean"
        p:dataSource-ref="dataSource"
        p:mapperLocations="classpath:**model/dal/**/*Mapper.xml"
    />
        <!-- p:configLocation="classpath:mybatis-config.xml"  -->
    
    <!-- BATCH 如果想要进行批量操作可加入这个属性 -->
     <!--  
    <bean id="batchSession" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory" />
       <constructor-arg index="1" value="BATCH" />
    </bean> -->
  
     
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <!-- 事务配置 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">     
          <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 
        query：查询
        find：按主键查询某一实体
        add：新增
        modify：修改
        remove：逻辑删除
        drop：物理删除
        is：判断校验
        import：导入
        export：导出
        upload: 上传
        download：下载
        
        TransactionDefinition接口中定义，共有7种选项可用：
        PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
        PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
        PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
        PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
        PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
        PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
        PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务（还不是太明白），如果当前没有事务，就新建一个事务。
        TransactionDefinition中定义的隔离（isolation）级别，有5种：
        1 ISOLATION_DEFAULT 默认的隔离级别
        //下面几个都是 JDBC isolation levels 一一对应：
        2 ISOLATION_READ_UNCOMMITTED Connection.TRANSACTION_READ_UNCOMMITTED
        //指示防止发生脏读的常量；不可重复读和虚读有可能发生。
        3 ISOLATION_READ_COMMITTED Connection.TRANSACTION_READ_COMMITTED
        //指示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom read) 的常量。
        4 ISOLATION_REPEATABLE_READ Connection.TRANSACTION_REPEATABLE_READ
        //指示防止发生脏读和不可重复读的常量；虚读有可能发生。
        5 ISOLATION_SERIALIZABLE Connection.TRANSACTION_SERIALIZABLE
        //指示防止发生脏读、不可重复读和虚读的常量。
        //注：
        //脏读 dirty reads：当事务读取还未被提交的数据时，就会发生这种事件。举例来说：Transaction 1 修改了一行数据，然后 Transaction 2 在 Transaction 1 还未提交修改操作之前读取了被修改的行。如果 Transaction 1 回滚了修改操作，那么 Transaction 2 读取的数据就可以看作是从未存在过的。
        //不可重复的读 non-repeatable reads：当事务两次读取同一行数据，但每次得到的数据都不一样时，就会发生这种事件。举例来说：Transaction 1 读取一行数据，然后 Transaction 2 修改或删除该行并提交修改操作。当 Transaction 1 试图重新读取该行时，它就会得到不同的数据值（如果该行被更新）或发现该行不再存在（如果该行被删除）。
        //虚读 phantom read：如果符合搜索条件的一行数据在后面的读取操作中出现，但该行数据却不属于最初的数据，就会发生这种事件。举例来说：Transaction 1 读取满足某种搜索条件的一些行，然后 Transaction 2 插入了符合 Transaction 1 的搜索条件的一个新行。如果 Transaction 1 重新执行产生原来那些行的查询，就会得到不同的行。
                
     -->
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*"
            propagation="REQUIRED"
            read-only="false" 
            rollback-for="java.lang.Exception"
            timeout="60000"
            />
            
            <tx:method name="modify*"
            propagation="REQUIRED"
            read-only="false" 
            rollback-for="java.lang.Exception"
            timeout="60000"
            />
            
            <tx:method name="remove*" 
            propagation="REQUIRED" 
            read-only="false" 
            rollback-for="java.lang.Exception"
            timeout="60000"
            />
            
            <tx:method name="drop*" 
            propagation="REQUIRED" 
            read-only="false" 
            rollback-for="java.lang.Exception"
            timeout="60000"
            />
            
            <!--
            <tx:method name="delete*" 
            propagation="REQUIRED" 
            read-only="false" 
            rollback-for="java.lang.Exception"
            no-rollback-for="java.lang.RuntimeException"
            timeout="60000"
            />
            -->
            
            <tx:method name="find*" propagation="NEVER" read-only="true" timeout="30000"/>
            <tx:method name="list*" propagation="NEVER" read-only="true" timeout="30000"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>    
        <aop:pointcut id="pc" expression="execution(public * model.service.*.*(..))" /> <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
        <!-- 切面 -->
        
        <!--
        <aop:aspect id="autoAspect" ref="autoAspect">
            <aop:pointcut id="autoAP" expression="execution(public * control.action.sys.SysCommonControl*.*(..))" />  
            <aop:before pointcut-ref="autoAP" method="doBefore"/>  
            <aop:after pointcut-ref="autoAP" method="doAfter"/>  
            <aop:around pointcut-ref="autoAP" method="doAround"/>  
            <aop:after-throwing pointcut-ref="autoAP" method="doThrowing" throwing="ex"/>
        </aop:aspect>
        -->
    </aop:config>
    
    <!-- ehcache -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation">
            <value>classpath:ehcache.xml</value>    
        </property>   
    </bean>  
  
    <bean id="siteCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">  
        <property name="cacheManager">  
            <ref local="cacheManager"/>  
        </property>  
        <property name="cacheName">  
            <value>siteCache</value>  
        </property>
    </bean>  
    
    <!-- quartz -->
    
    <!-- beans -->
    
    <!-- 按照这种方式
    	如：
    	gdTakeAwayOrderMapper 是ID
    	com.hcinfos.mycar.model.dal.sys. 表示包名，
    	GdTakeAwayOrderMapper 表示Mapper类
    	其中GdTakeAwayOrder 是POJO的类名
    	
    <bean id="gdTakeAwayOrderMapper" 
    		 p:mapperInterface="com.hcinfos.mycar.model.dal.sys.GdTakeAwayOrderMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>
    		 
    <bean id="gdTakeAwayOrderDetailMapper" 
    		 p:mapperInterface="com.hcinfos.mycar.model.dal.sys.GdTakeAwayOrderDetailMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>
     -->
    
    <bean id="UrFaqTypeMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqTypeMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>
    <bean id="UrFaqTypeExtMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.ext.UrFaqTypeExtMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory">
    		 </bean>
   <bean id="UrFaqMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>
    <bean id="UrFaqExtMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.ext.UrFaqExtMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>  
   <bean id="UrFaqFileMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqFileMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean> 
   <bean id="UrFaqFileRelMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqFileRelMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>
   <bean id="UrFaqImgMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqImgMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean> 
  <bean id="UrFaqImgRelMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqImgRelMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean> 
  <bean id="UrFaqInterestMapper" 
    		 p:mapperInterface="com.uwen.ur.model.dal.sys.UrFaqInterestMapper" 
    		 class="org.mybatis.spring.mapper.MapperFactoryBean"
    		 p:sqlSessionFactory-ref="sqlSessionFactory"></bean>  		   		    		    		  		 		 
    		 
</beans>